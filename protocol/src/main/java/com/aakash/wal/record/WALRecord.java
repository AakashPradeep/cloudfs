/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.aakash.wal.record;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WALRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4944663154273583932L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WALRecord\",\"namespace\":\"com.aakash.wal.record\",\"fields\":[{\"name\":\"trxId\",\"type\":\"long\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"reqData\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WALRecord> ENCODER =
      new BinaryMessageEncoder<WALRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WALRecord> DECODER =
      new BinaryMessageDecoder<WALRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WALRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WALRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WALRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<WALRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WALRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WALRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WALRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WALRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long trxId;
   private java.lang.CharSequence operation;
   private java.nio.ByteBuffer reqData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WALRecord() {}

  /**
   * All-args constructor.
   * @param trxId The new value for trxId
   * @param operation The new value for operation
   * @param reqData The new value for reqData
   */
  public WALRecord(java.lang.Long trxId, java.lang.CharSequence operation, java.nio.ByteBuffer reqData) {
    this.trxId = trxId;
    this.operation = operation;
    this.reqData = reqData;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return trxId;
    case 1: return operation;
    case 2: return reqData;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: trxId = (java.lang.Long)value$; break;
    case 1: operation = (java.lang.CharSequence)value$; break;
    case 2: reqData = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'trxId' field.
   * @return The value of the 'trxId' field.
   */
  public long getTrxId() {
    return trxId;
  }


  /**
   * Sets the value of the 'trxId' field.
   * @param value the value to set.
   */
  public void setTrxId(long value) {
    this.trxId = value;
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public java.lang.CharSequence getOperation() {
    return operation;
  }


  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(java.lang.CharSequence value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'reqData' field.
   * @return The value of the 'reqData' field.
   */
  public java.nio.ByteBuffer getReqData() {
    return reqData;
  }


  /**
   * Sets the value of the 'reqData' field.
   * @param value the value to set.
   */
  public void setReqData(java.nio.ByteBuffer value) {
    this.reqData = value;
  }

  /**
   * Creates a new WALRecord RecordBuilder.
   * @return A new WALRecord RecordBuilder
   */
  public static com.aakash.wal.record.WALRecord.Builder newBuilder() {
    return new com.aakash.wal.record.WALRecord.Builder();
  }

  /**
   * Creates a new WALRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WALRecord RecordBuilder
   */
  public static com.aakash.wal.record.WALRecord.Builder newBuilder(com.aakash.wal.record.WALRecord.Builder other) {
    if (other == null) {
      return new com.aakash.wal.record.WALRecord.Builder();
    } else {
      return new com.aakash.wal.record.WALRecord.Builder(other);
    }
  }

  /**
   * Creates a new WALRecord RecordBuilder by copying an existing WALRecord instance.
   * @param other The existing instance to copy.
   * @return A new WALRecord RecordBuilder
   */
  public static com.aakash.wal.record.WALRecord.Builder newBuilder(com.aakash.wal.record.WALRecord other) {
    if (other == null) {
      return new com.aakash.wal.record.WALRecord.Builder();
    } else {
      return new com.aakash.wal.record.WALRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for WALRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WALRecord>
    implements org.apache.avro.data.RecordBuilder<WALRecord> {

    private long trxId;
    private java.lang.CharSequence operation;
    private java.nio.ByteBuffer reqData;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.aakash.wal.record.WALRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.trxId)) {
        this.trxId = data().deepCopy(fields()[0].schema(), other.trxId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.operation)) {
        this.operation = data().deepCopy(fields()[1].schema(), other.operation);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.reqData)) {
        this.reqData = data().deepCopy(fields()[2].schema(), other.reqData);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing WALRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.aakash.wal.record.WALRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.trxId)) {
        this.trxId = data().deepCopy(fields()[0].schema(), other.trxId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.operation)) {
        this.operation = data().deepCopy(fields()[1].schema(), other.operation);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.reqData)) {
        this.reqData = data().deepCopy(fields()[2].schema(), other.reqData);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'trxId' field.
      * @return The value.
      */
    public long getTrxId() {
      return trxId;
    }


    /**
      * Sets the value of the 'trxId' field.
      * @param value The value of 'trxId'.
      * @return This builder.
      */
    public com.aakash.wal.record.WALRecord.Builder setTrxId(long value) {
      validate(fields()[0], value);
      this.trxId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'trxId' field has been set.
      * @return True if the 'trxId' field has been set, false otherwise.
      */
    public boolean hasTrxId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'trxId' field.
      * @return This builder.
      */
    public com.aakash.wal.record.WALRecord.Builder clearTrxId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public java.lang.CharSequence getOperation() {
      return operation;
    }


    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public com.aakash.wal.record.WALRecord.Builder setOperation(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.operation = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public com.aakash.wal.record.WALRecord.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'reqData' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getReqData() {
      return reqData;
    }


    /**
      * Sets the value of the 'reqData' field.
      * @param value The value of 'reqData'.
      * @return This builder.
      */
    public com.aakash.wal.record.WALRecord.Builder setReqData(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.reqData = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'reqData' field has been set.
      * @return True if the 'reqData' field has been set, false otherwise.
      */
    public boolean hasReqData() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'reqData' field.
      * @return This builder.
      */
    public com.aakash.wal.record.WALRecord.Builder clearReqData() {
      reqData = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WALRecord build() {
      try {
        WALRecord record = new WALRecord();
        record.trxId = fieldSetFlags()[0] ? this.trxId : (java.lang.Long) defaultValue(fields()[0]);
        record.operation = fieldSetFlags()[1] ? this.operation : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.reqData = fieldSetFlags()[2] ? this.reqData : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WALRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<WALRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WALRecord>
    READER$ = (org.apache.avro.io.DatumReader<WALRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.trxId);

    out.writeString(this.operation);

    out.writeBytes(this.reqData);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.trxId = in.readLong();

      this.operation = in.readString(this.operation instanceof Utf8 ? (Utf8)this.operation : null);

      this.reqData = in.readBytes(this.reqData);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.trxId = in.readLong();
          break;

        case 1:
          this.operation = in.readString(this.operation instanceof Utf8 ? (Utf8)this.operation : null);
          break;

        case 2:
          this.reqData = in.readBytes(this.reqData);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










